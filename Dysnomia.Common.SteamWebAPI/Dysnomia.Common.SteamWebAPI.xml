<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dysnomia.Common.SteamWebAPI</name>
    </assembly>
    <members>
        <member name="T:Dysnomia.Common.SteamWebAPI.BroadcastService">
            <summary>
            Provides access to Steam broadcasts.
            https://partner.steamgames.com/doc/webapi/IBroadcastService
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.BroadcastService.PostGameDataFrame(System.String,System.UInt32,System.UInt64,System.UInt64,System.String)">
            <summary>
            Add a game meta data frame to broadcast
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid"></param>
            <param name="steamid"></param>
            <param name="broadcast_id"></param>
            <param name="frame_data"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType" -->
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentNoSelection">
            <summary>
            dummy ilegal value: the user has not made a selection
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentUnspecified">
            <summary>
            we use this to mean "other"
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentAll">
            <summary>
            reset all community content
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentAvatarImage">
            <summary>
            clear avatar image
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentProfileText">
            <summary>
            reset profile text
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentWebLinks">
            <summary>
            delete web links
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentAnnouncement">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentEventText">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentCustomCSS">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentProfileURL">
            <summary>
            delete community URL ID
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentComments">
            <summary>
            just comments this guy has written
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentPersonaName">
            <summary>
            persona name
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentScreenshot">
            <summary>
            screenshot
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentVideo">
            <summary>
            videos
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentCheating">
            <summary>
            cheating
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentUGCImage">
            <summary>
            Image stored in UGC --- the report is accusing the image of being offensive
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentActorUGCImage">
            <summary>
            Abuse report actor has uploaded a UGC image to server as supporting documentation of their claim
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType" -->
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeNoSelection">
            <summary>
            dummy ilegal value: the user has not made a selection
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeUnspecified">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeInappropriate">
            <summary>
            just not ok to post
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeProhibited">
            <summary>
            prohibited by EULA or general law
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeSpamming">
            <summary>
            excessive spamming
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeAdvertisement">
            <summary>
            unwanted advertisement
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeExploit">
            <summary>
            content data attempts to exploit code issue
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeSpoofing">
            <summary>
            user/group is impersonating an official contact
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeLanguage">
            <summary>
            bad language
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeAdultContent">
            <summary>
            any kind of adult material, references, etc
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeHarassment">
            <summary>
            harassment, discrimination, racism, etc
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeCheating">
            <summary>
            cheating
            </summary>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.IBroadcastService">
            <summary>
            Provides access to Steam broadcasts.
            https://partner.steamgames.com/doc/webapi/IBroadcastService
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.IBroadcastService.PostGameDataFrame(System.String,System.UInt32,System.UInt64,System.UInt64,System.String)">
            <summary>
            Add a game meta data frame to broadcast
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid"></param>
            <param name="steamid"></param>
            <param name="broadcast_id"></param>
            <param name="frame_data"></param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.ISteamApps">
            <summary>
            Used to access data about applications on Steam.
            https://partner.steamgames.com/doc/webapi/ISteamApps
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetAppBetas(System.String,System.UInt32)">
            <summary>
            Gets all of the beta branches for the specified application.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the betas of.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetAppBuilds(System.String,System.UInt32,System.UInt32)">
            <summary>
            Gets an applications build history.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the betas of.</param>
            <param name="count">The number of builds to retrieve, the default is 10.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetAppDepotVersions(System.String,System.UInt32)">
            <summary>
            Gets all the versions of all the depots for the specified application.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the depot versions for.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetAppList">
            <summary>
            Gets the complete list of public apps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetCheatingReports(System.String,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="timebegin">Time range begin</param>
            <param name="timeend">Time range end</param>
            <param name="includereports">include reports that were not bans</param>
            <param name="includebans">include reports that were bans</param>
            <param name="reportidmin">minimum report id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetCheatingReports(System.String,System.UInt32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="timebegin">Time range begin</param>
            <param name="timeend">Time range end</param>
            <param name="includereports">include reports that were not bans</param>
            <param name="includebans">include reports that were bans</param>
            <param name="reportidmin">minimum report id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetPartnerAppListForWebAPIKey(System.String,System.String)">
            <summary>
            Get a list of appIDs associated with a WebAPI key. Type_filter can used to specify certain app types to be returned.
            Possible values are "game,application,tool,demo,dlc,music". When type_filter is blank or not used, all apps are returned.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="type_filter">Optional comma separated list of types to filter on</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetPlayersBanned(System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetServerList(System.String,System.String,System.Nullable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="filter">Query filter string</param>
            <param name="limit">Limit number of servers in the response</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetServersAtAddress(System.String)">
            <summary>
            
            </summary>
            <param name="addr">IP or IP:queryport to list</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.SetAppBuildLive(System.String,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="buildid">BuildID</param>
            <param name="betakey">Beta key, required. Use public for default branch</param>
            <param name="description">Optional description for this build</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.UpToDateCheck(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="appid">AppID of game</param>
            <param name="version">The installed version of the game</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.ISteamCommunity">
            <summary>
            Provides restricted access to Steam Community features.
            https://partner.steamgames.com/doc/webapi/ISteamCommunity
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamCommunity.ReportAbuse(System.String,System.UInt64,System.UInt64,System.UInt32,Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType,Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType,System.String,System.Nullable{System.UInt64})">
            <summary>
            Allows publishers to report users who are behaving badly on their community hub.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamidActor">SteamID of user doing the reporting</param>
            <param name="steamidTarget">SteamID of the entity being accused of abuse</param>
            <param name="appid">AppID to check for ownership</param>
            <param name="abuseType">Abuse type code</param>
            <param name="contentType">Content type code</param>
            <param name="description">Narrative from user</param>
            <param name="gid">GID of related record (depends on content type)</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.ISteamUserAuth">
            <summary>
            Used to access information about users.
            https://partner.steamgames.com/doc/webapi/ISteamUserAuth
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUserAuth.AuthenticateUser(System.UInt64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="steamid">Should be the users steamid, unencrypted.</param>
            <param name="sessionkey">Should be a 32 byte random blob of data, which is then encrypted with RSA using the Steam system's public key. Randomness is important here for security.</param>
            <param name="encrypted_loginkey">Should be the users hashed loginkey, AES encrypted with the sessionkey.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUserAuth.AuthenticateUserTicket(System.String,System.UInt32,System.String)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key</param>
            <param name="appid">appid of game</param>
            <param name="ticket">Convert the ticket from GetAuthSessionTicket from binary to hex into an appropriately sized byte character array and pass the result in as this ticket parameter.</param>
            <returns>The user's 64-bit SteamID if the user's ticket is valid</returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.SteamApps">
            <summary>
            Used to access data about applications on Steam.
            https://partner.steamgames.com/doc/webapi/ISteamApps
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetAppBetas(System.String,System.UInt32)">
            <summary>
            Gets all of the beta branches for the specified application.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the betas of.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetAppBuilds(System.String,System.UInt32,System.UInt32)">
            <summary>
            Gets an applications build history.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the betas of.</param>
            <param name="count">The number of builds to retrieve, the default is 10.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetAppDepotVersions(System.String,System.UInt32)">
            <summary>
            Gets all the versions of all the depots for the specified application.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the depot versions for.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetAppList">
            <summary>
            Gets the complete list of public apps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetCheatingReports(System.String,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="timebegin">Time range begin</param>
            <param name="timeend">Time range end</param>
            <param name="includereports">include reports that were not bans</param>
            <param name="includebans">include reports that were bans</param>
            <param name="reportidmin">minimum report id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetCheatingReports(System.String,System.UInt32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="timebegin">Time range begin</param>
            <param name="timeend">Time range end</param>
            <param name="includereports">include reports that were not bans</param>
            <param name="includebans">include reports that were bans</param>
            <param name="reportidmin">minimum report id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetPartnerAppListForWebAPIKey(System.String,System.String)">
            <summary>
            Get a list of appIDs associated with a WebAPI key. Type_filter can used to specify certain app types to be returned.
            Possible values are "game,application,tool,demo,dlc,music". When type_filter is blank or not used, all apps are returned.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="type_filter">Optional comma separated list of types to filter on</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetPlayersBanned(System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetServerList(System.String,System.String,System.Nullable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="filter">Query filter string</param>
            <param name="limit">Limit number of servers in the response</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetServersAtAddress(System.String)">
            <summary>
            
            </summary>
            <param name="addr">IP or IP:queryport to list</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.SetAppBuildLive(System.String,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="buildid">BuildID</param>
            <param name="betakey">Beta key, required. Use public for default branch</param>
            <param name="description">Optional description for this build</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.UpToDateCheck(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="appid">AppID of game</param>
            <param name="version">The installed version of the game</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.SteamCommunity">
            <summary>
            Provides restricted access to Steam Community features.
            https://partner.steamgames.com/doc/webapi/ISteamCommunity
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamCommunity.ReportAbuse(System.String,System.UInt64,System.UInt64,System.UInt32,Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType,Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType,System.String,System.Nullable{System.UInt64})">
            <summary>
            Allows publishers to report users who are behaving badly on their community hub.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamidActor">SteamID of user doing the reporting</param>
            <param name="steamidTarget">SteamID of the entity being accused of abuse</param>
            <param name="appid">AppID to check for ownership</param>
            <param name="abuseType">Abuse type code (see EAbuseReportType enum)</param>
            <param name="contentType">Content type code (see ECommunityContentType enum)</param>
            <param name="description">Narrative from user</param>
            <param name="gid">GID of related record (depends on content type)</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.SteamUserAuth">
            <summary>
            Used to access information about users.
            https://partner.steamgames.com/doc/webapi/ISteamUserAuth
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUserAuth.AuthenticateUser(System.UInt64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="steamid">Should be the users steamid, unencrypted.</param>
            <param name="sessionkey">Should be a 32 byte random blob of data, which is then encrypted with RSA using the Steam system's public key. Randomness is important here for security.</param>
            <param name="encrypted_loginkey">Should be the users hashed loginkey, AES encrypted with the sessionkey.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUserAuth.AuthenticateUserTicket(System.String,System.UInt32,System.String)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key</param>
            <param name="appid">appid of game</param>
            <param name="ticket">Convert the ticket from GetAuthSessionTicket from binary to hex into an appropriately sized byte character array and pass the result in as this ticket parameter.</param>
            <returns>The user's 64-bit SteamID if the user's ticket is valid</returns>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.SteamWebAPIQuerier.PROD_MODE">
            <summary>
            Set that value to true to directly call API at https://partner.steam-api.com/ instead of https://api.steampowered.com/
            This means we will not call API through Akamai cache server.
            WARNING: if you recieve multiple error returned by https://partner.steam-api.com/ your IP might be banned by the firewall for a while.
            See https://partner.steamgames.com/doc/webapi_overview#addresses for more informations
            </summary>
        </member>
    </members>
</doc>
