<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dysnomia.Common.SteamWebAPI</name>
    </assembly>
    <members>
        <member name="T:Dysnomia.Common.SteamWebAPI.BroadcastService">
            <summary>
            Provides access to Steam broadcasts.
            https://partner.steamgames.com/doc/webapi/IBroadcastService
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.BroadcastService.PostGameDataFrame(System.String,System.UInt32,System.UInt64,System.UInt64,System.String)">
            <summary>
            Add a game meta data frame to broadcast
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid"></param>
            <param name="steamid"></param>
            <param name="broadcast_id"></param>
            <param name="frame_data"></param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.CheatReportingService">
            <summary>
            This service allows your game to report cheats and cheaters to the VAC system and provides the toolset behind the Game Bans system. It enables two independent workflows for detecting and managing cheating in your game:
            - Gather community reports of cheating and request bans/suspensions based upon this information.
            - Submit detailed information about known cheat software to the VAC system. Once processed, this information will be used to automatically detect and ban players using known cheats.
            To use this interface you must first opt in to VAC support. This can be done from the Anti-Cheat Configuration page in the App Admin panel.
            
            https://partner.steamgames.com/doc/webapi/ICheatReportingService
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.CheatReportingService.ReportPlayerCheating(System.String,System.UInt64,System.UInt32,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
             <summary>
             ReportPlayerCheating is designed to gather community reports of cheating, where one player reports another player within the game.
            
             It is intended for unreliable data from peers in the game(semi-trusted sources). The back-end that reports the data should ensure that both parties are authenticated,
             but the data in itself is treated as hearsay.Optional parameters may be used to encode the type of cheating that is suspected or additional evidence(an identifier pointing
             to the match/demo for further review).
             </summary>
             <param name="key">Steamworks Web API publisher authentication key.</param>
             <param name="steamid">The Steam ID of the user who is being reported for cheating.</param>
             <param name="appid">The App ID for the game.</param>
             <param name="steamidreporter">(Optional) The Steam ID of the user or game server who is reporting the cheating.</param>
             <param name="appdata">(Optional) App specific data about the type of cheating set by developer. (ex 1 = Aimbot, 2 = Wallhack, 3 = Griefing)</param>
             <param name="heuristic">(Optional) Extra information about the source of the cheating - was it a heuristic.</param>
             <param name="detection">(Optional) Extra information about the source of the cheating - was it a detection.</param>
             <param name="playerreport">(Optional) Extra information about the source of the cheating - was it a player report.</param>
             <param name="noreportid">(Optional) Don't return reportid. This should only be passed if you don't intend to issue a ban based on this report.</param>
             <param name="gamemode">(Optional) Extra information about state of game - was it a specific type of game play or game mode. (0 = generic)</param>
             <param name="suspicionstarttime">(Optional) Extra information indicating how far back the game thinks is interesting for this user. Unix epoch time (time since Jan 1st, 1970).</param>
             <param name="severity">(Optional) Level of severity of bad action being reported. Scale set by developer.</param>
             <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.CheatReportingService.ReportPlayerCheating(System.String,System.UInt64,System.UInt32)">
             <summary>
             ReportPlayerCheating is designed to gather community reports of cheating, where one player reports another player within the game.
            
             It is intended for unreliable data from peers in the game(semi-trusted sources). The back-end that reports the data should ensure that both parties are authenticated,
             but the data in itself is treated as hearsay.Optional parameters may be used to encode the type of cheating that is suspected or additional evidence(an identifier pointing
             to the match/demo for further review).
             </summary>
             <param name="key">Steamworks Web API publisher authentication key.</param>
             <param name="steamid">The Steam ID of the user who is being reported for cheating.</param>
             <param name="appid">The App ID for the game.</param>
             <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.CheatReportingService.RequestPlayerGameBan(System.String,System.UInt64,System.UInt32,System.Nullable{System.UInt64},System.String,System.Nullable{System.UInt32},System.Nullable{System.Boolean},System.Nullable{System.UInt32})">
            <summary>
            Requests a game ban on a specific player.
            
            This is designed to be used after the incidents from ReportPlayerCheating have been reviewed and cheating has been confirmed.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">Steam ID of the user who is reported as cheating.</param>
            <param name="appid">The appid of the game.</param>
            <param name="reportid">The reportid originally used to report cheating.</param>
            <param name="cheatDescription">Text describing cheating infraction.</param>
            <param name="duration">Ban duration requested in seconds. (duration 0 will issue infinite - less than a year is a suspension and not visible on profile)</param>
            <param name="delayban">Delay the ban according to default ban delay rules.</param>
            <param name="flags">Additional information about the ban request. (Unused)</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.CheatReportingService.RequestPlayerGameBan(System.String,System.UInt64,System.UInt32)">
            <summary>
            Requests a game ban on a specific player.
            
            This is designed to be used after the incidents from ReportPlayerCheating have been reviewed and cheating has been confirmed.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">Steam ID of the user who is reported as cheating.</param>
            <param name="appid">The appid of the game.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.CheatReportingService.RemovePlayerGameBan(System.String,System.UInt64,System.UInt32)">
             <summary>
             Remove a game ban on a player.
            
             This is used if a Game ban is determined to be a false positive.
             </summary>
             <param name="key">Steamworks Web API publisher authentication key.</param>
             <param name="steamid">Steam ID of the user who is reported as cheating.</param>
             <param name="appid">The appid of the game.</param>
             <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.CheatReportingService.GetCheatingReports(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            
            Used to gather the cheating reports so that they may be reviewed and a determination made.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID for the game.</param>
            <param name="timeend">The end of the time range. Formatted as Unix epoch time (time since Jan 1st, 1970).</param>
            <param name="timebegin">The beginning of the time range. Formatted as Unix epoch time (time since Jan 1st, 1970).</param>
            <param name="reportidadmin">Minimum reportID to include. (can pass 0 - end of previous report range)</param>
            <param name="includereports">(Optional) Include reports. If false includebans must be true.</param>
            <param name="includebans">(Optional) Include ban requests? If false includereports must be true.</param>
            <param name="steamid">(Optional) Query just for this Steam ID.</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType">
             <summary>
             Different content types that can be reported as abusive.
            
             WARNING: These enum values MUST MATCH the values in Steam's ECommunityContentType!
             
             Extracted From TF2 and Source Engine source code
             </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentNoSelection">
            <summary>
            dummy ilegal value: the user has not made a selection
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentUnspecified">
            <summary>
            we use this to mean "other"
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentAll">
            <summary>
            reset all community content
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentAvatarImage">
            <summary>
            clear avatar image
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentProfileText">
            <summary>
            reset profile text
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentWebLinks">
            <summary>
            delete web links
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentAnnouncement">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentEventText">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentCustomCSS">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentProfileURL">
            <summary>
            delete community URL ID
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentComments">
            <summary>
            just comments this guy has written
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentPersonaName">
            <summary>
            persona name
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentScreenshot">
            <summary>
            screenshot
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentVideo">
            <summary>
            videos
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentCheating">
            <summary>
            cheating
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentUGCImage">
            <summary>
            Image stored in UGC --- the report is accusing the image of being offensive
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType.k_EAbuseReportContentActorUGCImage">
            <summary>
            Abuse report actor has uploaded a UGC image to server as supporting documentation of their claim
            </summary>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType">
            <summary>
            Types of reasons why a violation report was issued
            
            WARNING: These enum values MUST MATCH the values in Steam's EAbuseReportType!
            
            Extracted From TF2 and Source Engine source code
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeNoSelection">
            <summary>
            dummy ilegal value: the user has not made a selection
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeUnspecified">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeInappropriate">
            <summary>
            just not ok to post
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeProhibited">
            <summary>
            prohibited by EULA or general law
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeSpamming">
            <summary>
            excessive spamming
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeAdvertisement">
            <summary>
            unwanted advertisement
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeExploit">
            <summary>
            content data attempts to exploit code issue
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeSpoofing">
            <summary>
            user/group is impersonating an official contact
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeLanguage">
            <summary>
            bad language
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeAdultContent">
            <summary>
            any kind of adult material, references, etc
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeHarassment">
            <summary>
            harassment, discrimination, racism, etc
            </summary>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType.k_EAbuseReportTypeCheating">
            <summary>
            cheating
            </summary>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.IBroadcastService">
            <summary>
            Provides access to Steam broadcasts.
            https://partner.steamgames.com/doc/webapi/IBroadcastService
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.IBroadcastService.PostGameDataFrame(System.String,System.UInt32,System.UInt64,System.UInt64,System.String)">
            <summary>
            Add a game meta data frame to broadcast
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid"></param>
            <param name="steamid"></param>
            <param name="broadcast_id"></param>
            <param name="frame_data"></param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.ICheatReportingService">
            <summary>
            This service allows your game to report cheats and cheaters to the VAC system and provides the toolset behind the Game Bans system. It enables two independent workflows for detecting and managing cheating in your game:
            - Gather community reports of cheating and request bans/suspensions based upon this information.
            - Submit detailed information about known cheat software to the VAC system. Once processed, this information will be used to automatically detect and ban players using known cheats.
            To use this interface you must first opt in to VAC support. This can be done from the Anti-Cheat Configuration page in the App Admin panel.
            
            https://partner.steamgames.com/doc/webapi/ICheatReportingService
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ICheatReportingService.ReportPlayerCheating(System.String,System.UInt64,System.UInt32,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
             <summary>
             ReportPlayerCheating is designed to gather community reports of cheating, where one player reports another player within the game.
            
             It is intended for unreliable data from peers in the game(semi-trusted sources). The back-end that reports the data should ensure that both parties are authenticated,
             but the data in itself is treated as hearsay.Optional parameters may be used to encode the type of cheating that is suspected or additional evidence(an identifier pointing
             to the match/demo for further review).
             </summary>
             <param name="key">Steamworks Web API publisher authentication key.</param>
             <param name="steamid">The Steam ID of the user who is being reported for cheating.</param>
             <param name="appid">The App ID for the game.</param>
             <param name="steamidreporter">(Optional) The Steam ID of the user or game server who is reporting the cheating.</param>
             <param name="appdata">(Optional) App specific data about the type of cheating set by developer. (ex 1 = Aimbot, 2 = Wallhack, 3 = Griefing)</param>
             <param name="heuristic">(Optional) Extra information about the source of the cheating - was it a heuristic.</param>
             <param name="detection">(Optional) Extra information about the source of the cheating - was it a detection.</param>
             <param name="playerreport">(Optional) Extra information about the source of the cheating - was it a player report.</param>
             <param name="noreportid">(Optional) Don't return reportid. This should only be passed if you don't intend to issue a ban based on this report.</param>
             <param name="gamemode">(Optional) Extra information about state of game - was it a specific type of game play or game mode. (0 = generic)</param>
             <param name="suspicionstarttime">(Optional) Extra information indicating how far back the game thinks is interesting for this user. Unix epoch time (time since Jan 1st, 1970).</param>
             <param name="severity">(Optional) Level of severity of bad action being reported. Scale set by developer.</param>
             <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ICheatReportingService.ReportPlayerCheating(System.String,System.UInt64,System.UInt32)">
             <summary>
             ReportPlayerCheating is designed to gather community reports of cheating, where one player reports another player within the game.
            
             It is intended for unreliable data from peers in the game(semi-trusted sources). The back-end that reports the data should ensure that both parties are authenticated,
             but the data in itself is treated as hearsay.Optional parameters may be used to encode the type of cheating that is suspected or additional evidence(an identifier pointing
             to the match/demo for further review).
             </summary>
             <param name="key">Steamworks Web API publisher authentication key.</param>
             <param name="steamid">The Steam ID of the user who is being reported for cheating.</param>
             <param name="appid">The App ID for the game.</param>
             <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ICheatReportingService.RequestPlayerGameBan(System.String,System.UInt64,System.UInt32,System.Nullable{System.UInt64},System.String,System.Nullable{System.UInt32},System.Nullable{System.Boolean},System.Nullable{System.UInt32})">
            <summary>
            Requests a game ban on a specific player.
            
            This is designed to be used after the incidents from ReportPlayerCheating have been reviewed and cheating has been confirmed.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">Steam ID of the user who is reported as cheating.</param>
            <param name="appid">The appid of the game.</param>
            <param name="reportid">The reportid originally used to report cheating.</param>
            <param name="cheatDescription">Text describing cheating infraction.</param>
            <param name="duration">Ban duration requested in seconds. (duration 0 will issue infinite - less than a year is a suspension and not visible on profile)</param>
            <param name="delayban">Delay the ban according to default ban delay rules.</param>
            <param name="flags">Additional information about the ban request. (Unused)</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ICheatReportingService.RequestPlayerGameBan(System.String,System.UInt64,System.UInt32)">
            <summary>
            Requests a game ban on a specific player.
            
            This is designed to be used after the incidents from ReportPlayerCheating have been reviewed and cheating has been confirmed.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">Steam ID of the user who is reported as cheating.</param>
            <param name="appid">The appid of the game.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ICheatReportingService.GetCheatingReports(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            
            Used to gather the cheating reports so that they may be reviewed and a determination made.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID for the game.</param>
            <param name="timeend">The end of the time range. Formatted as Unix epoch time (time since Jan 1st, 1970).</param>
            <param name="timebegin">The beginning of the time range. Formatted as Unix epoch time (time since Jan 1st, 1970).</param>
            <param name="reportidadmin">Minimum reportID to include. (can pass 0 - end of previous report range)</param>
            <param name="includereports">(Optional) Include reports. If false includebans must be true.</param>
            <param name="includebans">(Optional) Include ban requests? If false includereports must be true.</param>
            <param name="steamid">(Optional) Query just for this Steam ID.</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.IPlayerService">
            <summary>
            Provides additional methods for interacting with Steam Users.
            See ISteamUser for the primary interface.
            
            https://partner.steamgames.com/doc/webapi/IPlayerService
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.IPlayerService.GetRecentlyPlayedGames(System.String,System.UInt64,System.UInt32)">
            <summary>
            Gets information about a player's recently played games
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <param name="count">The number of games to return (0 = all)</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.IPlayerService.GetOwnedGames(System.String,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Return a list of games owned by the player
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <param name="include_appinfo">true if we want additional details (name, icon) about each game</param>
            <param name="include_played_free_games">Free games are excluded by default. If this is set, free games the user has played will be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.IPlayerService.GetSteamLevel(System.String,System.UInt64)">
            <summary>
            Returns the Steam Level of a user
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.IPlayerService.GetBadges(System.String,System.UInt64)">
            <summary>
            Gets badges that are owned by a specific user
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.IPlayerService.GetCommunityBadgeProgress(System.String,System.UInt64,System.Nullable{System.UInt32})">
            <summary>
            Gets all the quests needed to get the specified badge, and which are completed
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <param name="badgeid">The badge we're asking about</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.IPlayerService.IsPlayingSharedGame(System.String,System.UInt64,System.UInt32)">
            <summary>
            Returns valid lender SteamID if game currently played is borrowed
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <param name="appid_playing">The game player is currently playing</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.ISteamApps">
            <summary>
            Used to access data about applications on Steam.
            https://partner.steamgames.com/doc/webapi/ISteamApps
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetAppBetas(System.String,System.UInt32)">
            <summary>
            Gets all of the beta branches for the specified application.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the betas of.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetAppBuilds(System.String,System.UInt32,System.UInt32)">
            <summary>
            Gets an applications build history.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the betas of.</param>
            <param name="count">The number of builds to retrieve, the default is 10.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetAppDepotVersions(System.String,System.UInt32)">
            <summary>
            Gets all the versions of all the depots for the specified application.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the depot versions for.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetAppList">
            <summary>
            Gets the complete list of public apps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetCheatingReports(System.String,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="timebegin">Time range begin</param>
            <param name="timeend">Time range end</param>
            <param name="includereports">include reports that were not bans</param>
            <param name="includebans">include reports that were bans</param>
            <param name="reportidmin">minimum report id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetCheatingReports(System.String,System.UInt32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="timebegin">Time range begin</param>
            <param name="timeend">Time range end</param>
            <param name="includereports">include reports that were not bans</param>
            <param name="includebans">include reports that were bans</param>
            <param name="reportidmin">minimum report id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetPartnerAppListForWebAPIKey(System.String,System.String)">
            <summary>
            Get a list of appIDs associated with a WebAPI key. Type_filter can used to specify certain app types to be returned.
            Possible values are "game,application,tool,demo,dlc,music". When type_filter is blank or not used, all apps are returned.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="type_filter">Optional comma separated list of types to filter on</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetPlayersBanned(System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetServerList(System.String,System.String,System.Nullable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="filter">Query filter string</param>
            <param name="limit">Limit number of servers in the response</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.GetServersAtAddress(System.String)">
            <summary>
            
            </summary>
            <param name="addr">IP or IP:queryport to list</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.SetAppBuildLive(System.String,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="buildid">BuildID</param>
            <param name="betakey">Beta key, required. Use public for default branch</param>
            <param name="description">Optional description for this build</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamApps.UpToDateCheck(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="appid">AppID of game</param>
            <param name="version">The installed version of the game</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.ISteamCommunity">
            <summary>
            Provides restricted access to Steam Community features.
            https://partner.steamgames.com/doc/webapi/ISteamCommunity
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamCommunity.ReportAbuse(System.String,System.UInt64,System.UInt64,System.UInt32,Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType,Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType,System.String,System.Nullable{System.UInt64})">
            <summary>
            Allows publishers to report users who are behaving badly on their community hub.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamidActor">SteamID of user doing the reporting</param>
            <param name="steamidTarget">SteamID of the entity being accused of abuse</param>
            <param name="appid">AppID to check for ownership</param>
            <param name="abuseType">Abuse type code</param>
            <param name="contentType">Content type code</param>
            <param name="description">Narrative from user</param>
            <param name="gid">GID of related record (depends on content type)</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.ISteamNews">
            <summary>
            Provides access to the Steam News functionality.
            https://partner.steamgames.com/doc/webapi/ISteamNews
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamNews.GetNewsForApp(System.UInt32,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.String)">
            <summary>
            Get the news for the specified app.
            </summary>
            <param name="appid">AppID to retrieve news for</param>
            <param name="maxlength">Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.</param>
            <param name="enddate">Retrieve posts earlier than this date (unix epoch timestamp)</param>
            <param name="count"># of posts to retrieve (default 20)</param>
            <param name="feeds">Comma-seperated list of feed names to return news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamNews.GetNewsForApp(System.UInt32,System.Nullable{System.UInt32},System.DateTime,System.Nullable{System.UInt32},System.String)">
            <summary>
            Get the news for the specified app.
            </summary>
            <param name="appid">AppID to retrieve news for</param>
            <param name="maxlength">Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.</param>
            <param name="enddate">Retrieve posts earlier than this date (unix epoch timestamp)</param>
            <param name="count"># of posts to retrieve (default 20)</param>
            <param name="feeds">Comma-seperated list of feed names to return news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamNews.GetNewsForApp(System.UInt32)">
            <summary>
            Get the news for the specified app.
            </summary>
            <param name="appid">AppID to retrieve news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamNews.GetNewsForAppAuthed(System.String,System.UInt32,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.String)">
            <summary>
            Get the news for the specified app. Publisher only version that can return info for unreleased games.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID to retrieve news for</param>
            <param name="maxlength">Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.</param>
            <param name="enddate">Retrieve posts earlier than this date (unix epoch timestamp)</param>
            <param name="count"># of posts to retrieve (default 20)</param>
            <param name="feeds">Comma-seperated list of feed names to return news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamNews.GetNewsForAppAuthed(System.String,System.UInt32,System.Nullable{System.UInt32},System.DateTime,System.Nullable{System.UInt32},System.String)">
            <summary>
            Get the news for the specified app. Publisher only version that can return info for unreleased games.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID to retrieve news for</param>
            <param name="maxlength">Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.</param>
            <param name="enddate">Retrieve posts earlier than this date (unix epoch timestamp)</param>
            <param name="count"># of posts to retrieve (default 20)</param>
            <param name="feeds">Comma-seperated list of feed names to return news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamNews.GetNewsForAppAuthed(System.String,System.UInt32)">
            <summary>
            Get the news for the specified app. Publisher only version that can return info for unreleased games.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID to retrieve news for</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.ISteamUser">
            <summary>
            Used to access information and interact with users.
            See IPlayerService for additional methods.
            
            https://partner.steamgames.com/doc/webapi/ISteamUser
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.CheckAppOwnership(System.String,System.UInt64,System.UInt32)">
            <summary>
            Checks if the specified user owns the app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <param name="appid">AppID to check for ownership</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetAppPriceInfo(System.String,System.UInt64,System.UInt32)">
            <summary>
            Get price info about one or mutiple apps
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <param name="appid">App id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetAppPriceInfo(System.String,System.UInt64,System.UInt32[])">
            <summary>
            Get price info about one or mutiple apps
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <param name="appids">App ids (max: 100)</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetDeletedSteamIDs(System.String,System.UInt32)">
             <summary>
             You can use GetDeletedSteamIDs to retrieve a list of deleted accounts that owned your game(s) before deletion. This API was created to allow for the deletion of user related data for GDPR and other personal information related purposes.
            
             The provided Steamworks Publisher Key is used for both authentication and to generate the list of appids to check against.
             </summary>
             <param name="key">Steamworks Web API publisher authentication key.</param>
             <param name="rowversion">An unsigned 64-bit value used to page through deleted accounts. Pass 0 when calling this API for the first time, then pass the value returned from the previous call for each additional request. This value will need to be stored on your server for future calls.</param>
             <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetFriendList(System.String,System.UInt64,System.String)">
            <summary>
            Gets friend list of a specific user by its steamid
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <param name="relationship">relationship type (ex: friend)</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetPlayerBans(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">Target Steam ID</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetPlayerBans(System.String,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamids">Target Steam IDs</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetPlayerSummaries(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">Target Steam ID</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetPlayerSummaries(System.String,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamids">Target Steam IDs</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetPublisherAppOwnership(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetPublisherAppOwnershipChanges(System.String,System.UInt64,System.UInt64)">
            <summary>
            This method can be used to determine what SteamIDs have ownership changes starting from a particular package or key row version number. From the list of SteamIDs returned, a call to GetPublisherAppOwnership can then return the associated ownership data for the applications in the group associated with the key passed in. A partner may wish to track this data in conjunction with linked Steam Accounts to better understand the state of product ownership on Steam.
            
            To begin, make a call to GetPublisherAppOwnershipChanges passing in packagerowversion and cdkeyrowversion with the values of 0 (zero). The response from the call will look something like this:
            
            After this first call returns:
            1) Make a call to GetPublisherAppOwnership for each SteamID to get the actual ownership per AppID.Store or use that data as needed.
            2) Once all the SteamIDs have been processed, check the value of moredata.If it is true, make a new call to GetPublisherAppOwnershipChanges passing in the packagerowversion and cdkeyrowversion as returned from the previous call to GetPublisherAppOwnershipChanges.
            3) Repeat Step 1 and 2 until moredata returns false.
            4) Store the final packagerowversion and cdkeyrowversion values for use in future GetPublisherAppOwnershipChanges calls(e.g. 24 hours later) instead of starting at 0 (zero) again.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="packagerowversion">The unsigned 64-bit row version to read package changes from. The row version of data read up to will be returned for use in future calls.</param>
            <param name="cdkeyrowversion">The unsigned 64-bit row version to read CD Key changes from. The row version of data read up to will be returned for use in future calls.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.GetUserGroupList(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUser.ResolveVanityURL(System.String,System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="vanityurl">The vanity URL to get a SteamID for</param>
            <param name="url_type">The type of vanity URL. 1 (default): Individual profile, 2: Group, 3: Official game group</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.ISteamUserAuth">
            <summary>
            Used to access information about users.
            https://partner.steamgames.com/doc/webapi/ISteamUserAuth
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUserAuth.AuthenticateUser(System.UInt64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="steamid">Should be the users steamid, unencrypted.</param>
            <param name="sessionkey">Should be a 32 byte random blob of data, which is then encrypted with RSA using the Steam system's public key. Randomness is important here for security.</param>
            <param name="encrypted_loginkey">Should be the users hashed loginkey, AES encrypted with the sessionkey.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.ISteamUserAuth.AuthenticateUserTicket(System.String,System.UInt32,System.String)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key</param>
            <param name="appid">appid of game</param>
            <param name="ticket">Convert the ticket from GetAuthSessionTicket from binary to hex into an appropriately sized byte character array and pass the result in as this ticket parameter.</param>
            <returns>The user's 64-bit SteamID if the user's ticket is valid</returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.PlayerService.GetRecentlyPlayedGames(System.String,System.UInt64,System.UInt32)">
            <summary>
            Gets information about a player's recently played games
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <param name="count">The number of games to return (0 = all)</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.PlayerService.GetOwnedGames(System.String,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Return a list of games owned by the player
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <param name="include_appinfo">true if we want additional details (name, icon) about each game</param>
            <param name="include_played_free_games">Free games are excluded by default. If this is set, free games the user has played will be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.PlayerService.GetSteamLevel(System.String,System.UInt64)">
            <summary>
            Returns the Steam Level of a user
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.PlayerService.GetBadges(System.String,System.UInt64)">
            <summary>
            Gets badges that are owned by a specific user
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.PlayerService.GetCommunityBadgeProgress(System.String,System.UInt64,System.Nullable{System.UInt32})">
            <summary>
            Gets all the quests needed to get the specified badge, and which are completed
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <param name="badgeid">The badge we're asking about. If null, query everything we can</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.PlayerService.IsPlayingSharedGame(System.String,System.UInt64,System.UInt32)">
            <summary>
            Returns valid lender SteamID if game currently played is borrowed
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">The player we're asking about</param>
            <param name="appid_playing">The game player is currently playing</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.SteamApps">
            <summary>
            Used to access data about applications on Steam.
            https://partner.steamgames.com/doc/webapi/ISteamApps
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetAppBetas(System.String,System.UInt32)">
            <summary>
            Gets all of the beta branches for the specified application.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the betas of.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetAppBuilds(System.String,System.UInt32,System.UInt32)">
            <summary>
            Gets an applications build history.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the betas of.</param>
            <param name="count">The number of builds to retrieve, the default is 10.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetAppDepotVersions(System.String,System.UInt32)">
            <summary>
            Gets all the versions of all the depots for the specified application.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">The App ID to get the depot versions for.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetAppList">
            <summary>
            Gets the complete list of public apps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetCheatingReports(System.String,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="timebegin">Time range begin</param>
            <param name="timeend">Time range end</param>
            <param name="includereports">include reports that were not bans</param>
            <param name="includebans">include reports that were bans</param>
            <param name="reportidmin">minimum report id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetCheatingReports(System.String,System.UInt32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Nullable{System.UInt64})">
            <summary>
            Get a list of cheating reports submitted for this app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="timebegin">Time range begin</param>
            <param name="timeend">Time range end</param>
            <param name="includereports">include reports that were not bans</param>
            <param name="includebans">include reports that were bans</param>
            <param name="reportidmin">minimum report id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetPartnerAppListForWebAPIKey(System.String,System.String)">
            <summary>
            Get a list of appIDs associated with a WebAPI key. Type_filter can used to specify certain app types to be returned.
            Possible values are "game,application,tool,demo,dlc,music". When type_filter is blank or not used, all apps are returned.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="type_filter">Optional comma separated list of types to filter on</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetPlayersBanned(System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetServerList(System.String,System.String,System.Nullable{System.UInt32})">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="filter">Query filter string</param>
            <param name="limit">Limit number of servers in the response</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.GetServersAtAddress(System.String)">
            <summary>
            
            </summary>
            <param name="addr">IP or IP:queryport to list</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.SetAppBuildLive(System.String,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID of game</param>
            <param name="buildid">BuildID</param>
            <param name="betakey">Beta key, required. Use public for default branch</param>
            <param name="description">Optional description for this build</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamApps.UpToDateCheck(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="appid">AppID of game</param>
            <param name="version">The installed version of the game</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.SteamCommunity">
            <summary>
            Provides restricted access to Steam Community features.
            https://partner.steamgames.com/doc/webapi/ISteamCommunity
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamCommunity.ReportAbuse(System.String,System.UInt64,System.UInt64,System.UInt32,Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportType,Dysnomia.Common.SteamWebAPI.Enums.EAbuseReportContentType,System.String,System.Nullable{System.UInt64})">
            <summary>
            Allows publishers to report users who are behaving badly on their community hub.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamidActor">SteamID of user doing the reporting</param>
            <param name="steamidTarget">SteamID of the entity being accused of abuse</param>
            <param name="appid">AppID to check for ownership</param>
            <param name="abuseType">Abuse type code (see EAbuseReportType enum)</param>
            <param name="contentType">Content type code (see ECommunityContentType enum)</param>
            <param name="description">Narrative from user</param>
            <param name="gid">GID of related record (depends on content type)</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.SteamNews">
            <summary>
            Provides access to the Steam News functionality.
            https://partner.steamgames.com/doc/webapi/ISteamNews
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamNews.GetNewsForApp(System.UInt32,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.String)">
            <summary>
            Get the news for the specified app.
            </summary>
            <param name="appid">AppID to retrieve news for</param>
            <param name="maxlength">Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.</param>
            <param name="enddate">Retrieve posts earlier than this date (unix epoch timestamp)</param>
            <param name="count"># of posts to retrieve (default 20)</param>
            <param name="feeds">Comma-seperated list of feed names to return news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamNews.GetNewsForApp(System.UInt32,System.Nullable{System.UInt32},System.DateTime,System.Nullable{System.UInt32},System.String)">
            <summary>
            Get the news for the specified app.
            </summary>
            <param name="appid">AppID to retrieve news for</param>
            <param name="maxlength">Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.</param>
            <param name="enddate">Retrieve posts earlier than this date (unix epoch timestamp)</param>
            <param name="count"># of posts to retrieve (default 20)</param>
            <param name="feeds">Comma-seperated list of feed names to return news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamNews.GetNewsForApp(System.UInt32)">
            <summary>
            Get the news for the specified app.
            </summary>
            <param name="appid">AppID to retrieve news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamNews.GetNewsForAppAuthed(System.String,System.UInt32,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.String)">
            <summary>
            Get the news for the specified app. Publisher only version that can return info for unreleased games.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID to retrieve news for</param>
            <param name="maxlength">Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.</param>
            <param name="enddate">Retrieve posts earlier than this date (unix epoch timestamp)</param>
            <param name="count"># of posts to retrieve (default 20)</param>
            <param name="feeds">Comma-seperated list of feed names to return news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamNews.GetNewsForAppAuthed(System.String,System.UInt32,System.Nullable{System.UInt32},System.DateTime,System.Nullable{System.UInt32},System.String)">
            <summary>
            Get the news for the specified app. Publisher only version that can return info for unreleased games.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID to retrieve news for</param>
            <param name="maxlength">Maximum length for the content to return, if this is 0 the full content is returned, if it's less then a blurb is generated to fit.</param>
            <param name="enddate">Retrieve posts earlier than this date (unix epoch timestamp)</param>
            <param name="count"># of posts to retrieve (default 20)</param>
            <param name="feeds">Comma-seperated list of feed names to return news for</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamNews.GetNewsForAppAuthed(System.String,System.UInt32)">
            <summary>
            Get the news for the specified app. Publisher only version that can return info for unreleased games.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="appid">AppID to retrieve news for</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.SteamUser">
            <summary>
            Used to access information and interact with users.
            See IPlayerService for additional methods.
            
            https://partner.steamgames.com/doc/webapi/ISteamUser
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.CheckAppOwnership(System.String,System.UInt64,System.UInt32)">
            <summary>
            Checks if the specified user owns the app.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <param name="appid">AppID to check for ownership</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetAppPriceInfo(System.String,System.UInt64,System.UInt32)">
            <summary>
            Get price info about one or mutiple apps
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <param name="appid">App id</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetAppPriceInfo(System.String,System.UInt64,System.UInt32[])">
            <summary>
            Get price info about one or mutiple apps
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <param name="appids">App ids (max: 100)</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetDeletedSteamIDs(System.String,System.UInt32)">
             <summary>
             You can use GetDeletedSteamIDs to retrieve a list of deleted accounts that owned your game(s) before deletion. This API was created to allow for the deletion of user related data for GDPR and other personal information related purposes.
            
             The provided Steamworks Publisher Key is used for both authentication and to generate the list of appids to check against.
             </summary>
             <param name="key">Steamworks Web API publisher authentication key.</param>
             <param name="rowversion">An unsigned 64-bit value used to page through deleted accounts. Pass 0 when calling this API for the first time, then pass the value returned from the previous call for each additional request. This value will need to be stored on your server for future calls.</param>
             <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetFriendList(System.String,System.UInt64,System.String)">
            <summary>
            Gets friend list of a specific user by its steamid
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <param name="relationship">relationship type (ex: friend)</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetPlayerBans(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">Target Steam ID</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetPlayerBans(System.String,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamids">Target Steam IDs</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetPlayerSummaries(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamid">Target Steam ID</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetPlayerSummaries(System.String,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="steamids">Target Steam IDs</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetPublisherAppOwnership(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetPublisherAppOwnershipChanges(System.String,System.UInt64,System.UInt64)">
            <summary>
            This method can be used to determine what SteamIDs have ownership changes starting from a particular package or key row version number. From the list of SteamIDs returned, a call to GetPublisherAppOwnership can then return the associated ownership data for the applications in the group associated with the key passed in. A partner may wish to track this data in conjunction with linked Steam Accounts to better understand the state of product ownership on Steam.
            
            To begin, make a call to GetPublisherAppOwnershipChanges passing in packagerowversion and cdkeyrowversion with the values of 0 (zero). The response from the call will look something like this:
            
            After this first call returns:
            1) Make a call to GetPublisherAppOwnership for each SteamID to get the actual ownership per AppID.Store or use that data as needed.
            2) Once all the SteamIDs have been processed, check the value of moredata.If it is true, make a new call to GetPublisherAppOwnershipChanges passing in the packagerowversion and cdkeyrowversion as returned from the previous call to GetPublisherAppOwnershipChanges.
            3) Repeat Step 1 and 2 until moredata returns false.
            4) Store the final packagerowversion and cdkeyrowversion values for use in future GetPublisherAppOwnershipChanges calls(e.g. 24 hours later) instead of starting at 0 (zero) again.
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="packagerowversion">The unsigned 64-bit row version to read package changes from. The row version of data read up to will be returned for use in future calls.</param>
            <param name="cdkeyrowversion">The unsigned 64-bit row version to read CD Key changes from. The row version of data read up to will be returned for use in future calls.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.GetUserGroupList(System.String,System.UInt64)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key.</param>
            <param name="steamid">SteamID of user</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUser.ResolveVanityURL(System.String,System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API user authentication key.</param>
            <param name="vanityurl">The vanity URL to get a SteamID for</param>
            <param name="url_type">The type of vanity URL. 1 (default): Individual profile, 2: Group, 3: Official game group</param>
            <returns></returns>
        </member>
        <member name="T:Dysnomia.Common.SteamWebAPI.SteamUserAuth">
            <summary>
            Used to access information about users.
            https://partner.steamgames.com/doc/webapi/ISteamUserAuth
            </summary>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUserAuth.AuthenticateUser(System.UInt64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="steamid">Should be the users steamid, unencrypted.</param>
            <param name="sessionkey">Should be a 32 byte random blob of data, which is then encrypted with RSA using the Steam system's public key. Randomness is important here for security.</param>
            <param name="encrypted_loginkey">Should be the users hashed loginkey, AES encrypted with the sessionkey.</param>
            <returns></returns>
        </member>
        <member name="M:Dysnomia.Common.SteamWebAPI.SteamUserAuth.AuthenticateUserTicket(System.String,System.UInt32,System.String)">
            <summary>
            
            </summary>
            <param name="key">Steamworks Web API publisher authentication key</param>
            <param name="appid">appid of game</param>
            <param name="ticket">Convert the ticket from GetAuthSessionTicket from binary to hex into an appropriately sized byte character array and pass the result in as this ticket parameter.</param>
            <returns>The user's 64-bit SteamID if the user's ticket is valid</returns>
        </member>
        <member name="F:Dysnomia.Common.SteamWebAPI.SteamWebAPIQuerier.PROD_MODE">
            <summary>
            Set that value to true to directly call API at https://partner.steam-api.com/ instead of https://api.steampowered.com/
            This means we will not call API through Akamai cache server.
            WARNING: if you recieve multiple error returned by https://partner.steam-api.com/ your IP might be banned by the firewall for a while.
            See https://partner.steamgames.com/doc/webapi_overview#addresses for more informations
            </summary>
        </member>
    </members>
</doc>
